{{ 'component-image-with-text.css' | asset_url | stylesheet_tag }}
{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }
  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}
<style>
  .block-title {
    display: flex;
    align-items: center;
  }
  .checkpoint {
    width: 10px;
    height: 10px;
    display: flex;
    border-radius: 50%;
    margin-right: 50px;
  }
  .block-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0 20px;
  }
  .block-content-description {
    margin-left: 20px;
  }
  .block-heading {
    text-align: left;
    width: 100%;
  }

  .custom-media {
    border: none;
    transition: opacity 0.5s ease;
    background: none;
  }
  .custom-media img {
    position: sticky !important;
    top: 20% !important;
    height: auto !important;
  }
  .block-container {
    transition: max-height 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .block-container-content {
    position: relative;
    opacity: 0;
    transition: opacity 0.5s ease;
  }
  .block-container-content.visible {
    opacity: 1;
  }
  .progress-bar {
    position: absolute;
    left: 0;
    top: 0;
    width: 5px;
    height: 100%;
  }
  .progress-bar-inner {
    position: absolute;
    width: 100%;
    background-color: #4caf50;
    transition: height 0.2s ease;
    left: 2px;
  }
  .image-content-item {
    position: -webkit-sticky !important;
    position: sticky !important;
    top: 0 !important;
  }
</style>

<div class="section-{{ section.id }}-padding container">
  <div class="page-width">
    <div class="image-with-text">
      <div class="image-with-text__grid grid grid--gapless grid--1-col grid--{% if section.settings.desktop_image_width == 'medium' %}2-col-tablet{% else %}3-col-tablet{% endif %}{% if section.settings.layout == 'text_first' %} image-with-text__grid--reverse{% endif %}">
        <div class="image-with-text__media-item--{{ section.settings.desktop_image_width }} grid__item image-content-item">
          <div
            class="image-with-text__media {% if section.settings.image != blank %} media custom-media{% else %} image-with-text__media--placeholder placeholder{% endif %}"
          >
            {%- if section.settings.image != blank -%}
              {%- assign widths = '198, 432, 642, 900, 1284, 1800' -%}
              {%- capture sizes -%}
                (min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 | divided_by: 1.6667 }}px,
                (min-width: 750px) calc((100vw - 130px) / 1.667), calc((100vw - 50px) / 1.667)
              {%- endcapture -%}
              {{
                section.settings.image
                | image_url: width: 1500
                | image_tag: sizes: sizes, widths: widths, height: auto, fetchpriority: fetch_priority
              }}
            {%- else -%}
              {{ 'detailed-apparel-1' | placeholder_svg_tag: 'placeholder-svg' }}
            {%- endif -%}
          </div>
        </div>
        <div class="image-with-text__text-item grid__item block-content">
          <h2 class="block-heading" style="color: {{ section.settings.content_color }}">
            {{ section.settings.description_title }}
          </h2>
          <p style="color: {{ section.settings.content_color }}">{{ section.settings.description_content }}</p>
          <div class="block-container">
            <div class="progress-bar">
              <div class="progress-bar-inner" style="background: {{ section.settings.content_color }}">
                <span class="empty-element"></span>
              </div>
            </div>

            {% for block in section.blocks %}
              {% if block.type == 'text' %}
                <div class="block-container-content">
                  <div class="block-title">
                    <h3 class="block-title" style="color: {{ section.settings.content_color }};">
                      <span class="checkpoint" style="background: {{ section.settings.content_color }}"></span
                      ><span>{{ block.settings.block_heading }}</span>
                    </h3>
                  </div>
                  <p class="block-content-description" style="color: {{ section.settings.content_color }}">
                    {{ block.settings.block_description }}
                  </p>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const blockContainer = document.querySelector('.block-container');
    const blocks = document.querySelectorAll('.block-container-content');
    const progressBarInner = document.querySelector('.progress-bar-inner');
    const checkpoint = document.querySelector('.checkpoint');
    const image = document.querySelector('.custom-media');

    function updateBlocksVisibility() {
      const viewportHeight = window.innerHeight;
      const viewportMiddle = window.scrollY + viewportHeight / 2;

      blocks.forEach((block) => {
        const blockRect = block.getBoundingClientRect();
        const blockTop = blockRect.top + window.scrollY;
        const blockBottom = blockRect.bottom + window.scrollY;
        const isVisible = blockBottom >= window.scrollY && blockTop <= viewportMiddle;

        if (isVisible) {
          block.classList.add('visible');
        } else {
          block.classList.remove('visible');
        }
      });

      updateProgressBar();
    }

    function updateProgressBar() {
      const containerRect = blockContainer.getBoundingClientRect();
      const containerTop = containerRect.top + window.scrollY;
      const containerHeight = Math.max(blockContainer.clientHeight, containerRect.height);

      const viewportMiddle = window.scrollY + window.innerHeight / 2;

      const scrollPosition = Math.max(window.scrollY - containerTop, 0);
      const progress = Math.max(Math.min((scrollPosition / (containerHeight - window.innerHeight)) * 100, 100), 0);

      let visibleHeight = 0;
      blocks.forEach((block) => {
        const blockRect = block.getBoundingClientRect();
        const blockTop = blockRect.top + window.scrollY;
        const blockBottom = blockRect.bottom + window.scrollY;

        if (blockTop < viewportMiddle) {
          visibleHeight += blockRect.height;
        }
      });

      if (checkpoint) {
        const checkpointRect = checkpoint.getBoundingClientRect();
        const checkpointTop = checkpointRect.top - containerRect.top;
        progressBarInner.style.top = `${checkpointTop}px`;
        progressBarInner.style.height = `${Math.min((visibleHeight / containerHeight) * 100, 100)}%`;
      }

      // console.log('scrollPosition:', scrollPosition);
      // console.log('containerHeight:', containerHeight);
      // console.log('viewportMiddle:', viewportMiddle);
      // console.log('progress:', progress);
    }

    window.addEventListener('scroll', updateBlocksVisibility);

    updateBlocksVisibility();
  });
</script>
{% schema %}
{
  "name": "Image with scroll",
  "settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "Select your image"
    },
    {
      "type": "select",
      "id": "desktop_image_width",
      "options": [
        {
          "value": "small",
          "label": "t:sections.image-with-text.settings.desktop_image_width.options__1.label"
        },
        {
          "value": "medium",
          "label": "t:sections.image-with-text.settings.desktop_image_width.options__2.label"
        },
        {
          "value": "large",
          "label": "t:sections.image-with-text.settings.desktop_image_width.options__3.label"
        }
      ],
      "default": "medium",
      "label": "t:sections.image-with-text.settings.desktop_image_width.label",
      "info": "t:sections.image-with-text.settings.desktop_image_width.info"
    },
    {
      "type": "select",
      "id": "layout",
      "options": [
        {
          "value": "image_first",
          "label": "t:sections.image-with-text.settings.layout.options__1.label"
        },
        {
          "value": "text_first",
          "label": "t:sections.image-with-text.settings.layout.options__2.label"
        }
      ],
      "default": "image_first",
      "label": "t:sections.image-with-text.settings.layout.label",
      "info": "t:sections.image-with-text.settings.layout.info"
    },
    {
      "type": "text",
      "id": "description_title",
      "label": "Description title",
      "default": "Set your title"
    },
    {
      "type": "text",
      "id": "description_content",
      "label": "Description content",
      "default": "Set your description"
    },
    {
      "type": "color",
      "id": "content_color",
      "default": "#00026E",
      "label": "Content Colour"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "text",
      "name": "Scroll block",
      "limit": 7,
      "settings": [
        {
          "type": "text",
          "id": "block_heading",
          "label": "Heading in block",
          "default": "Set your heading"
        },
        {
          "type": "textarea",
          "id": "block_description",
          "label": "Description in block",
          "default": "Set your description here in your block"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Image with scroll",
      "blocks": [
        {
          "type": "text"
        },
        {
          "type": "text"
        },
        {
          "type": "text"
        },
        {
          "type": "text"
        }
      ]
    }
  ]
}
{% endschema %}
